<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Image Processor - Grayscale & Smoothing</title>
  <style>
    body {
      font-family: Arial;
      margin: 20px;
    }
    canvas {
      border: 1px solid black;
      margin-bottom: 10px;
    }
    #pixelInfo {
      font-size: 14px;
      margin: 10px 0;
      font-weight: bold;
    }
    button, input[type="file"] {
      margin: 10px 0;
      font-size: 14px;
    }
  </style>
</head>
<body>

<h2>Image Processor - Grayscale & Smoothing</h2>

<input type="file" id="imageInput" accept="image/*"><br>

<label>
  <input type="checkbox" id="grayscaleCheckbox">
  Convert to Grayscale First
</label><br>

<button onclick="processImage()">Apply Smoothing Filter</button><br>

<div id="pixelInfo">Hover over the image to see pixel RGB values.</div>

<h3>Original Image:</h3>
<canvas id="originalCanvas"></canvas>

<h3>Processed Image:</h3>
<canvas id="processedCanvas"></canvas>

<script>
  const imageInput = document.getElementById('imageInput');
  const grayscaleCheckbox = document.getElementById('grayscaleCheckbox');
  const originalCanvas = document.getElementById('originalCanvas');
  const processedCanvas = document.getElementById('processedCanvas');
  const pixelInfo = document.getElementById('pixelInfo');

  let imageDataOriginal;

  imageInput.addEventListener('change', function () {
    const file = this.files[0];
    const reader = new FileReader();
    reader.onload = function (e) {
      const img = new Image();
      img.onload = function () {
        const ctx = originalCanvas.getContext('2d');
        originalCanvas.width = img.width;
        originalCanvas.height = img.height;
        ctx.drawImage(img, 0, 0);
        imageDataOriginal = ctx.getImageData(0, 0, img.width, img.height);
      };
      img.src = e.target.result;
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  });

  originalCanvas.addEventListener('mousemove', function(event) {
    const rect = originalCanvas.getBoundingClientRect();
    const x = Math.floor(event.clientX - rect.left);
    const y = Math.floor(event.clientY - rect.top);
    const ctx = originalCanvas.getContext('2d');

    if (x >= 0 && y >= 0 && x < originalCanvas.width && y < originalCanvas.height) {
      const pixel = ctx.getImageData(x, y, 1, 1).data;
      pixelInfo.textContent = X: ${x}, Y: ${y} | R: ${pixel[0]}, G: ${pixel[1]}, B: ${pixel[2]}, A: ${pixel[3]};
    } else {
      pixelInfo.textContent = 'Hover over the image to see pixel RGB values.';
    }
  });

  function processImage() {
    const ctx = processedCanvas.getContext('2d');
    processedCanvas.width = originalCanvas.width;
    processedCanvas.height = originalCanvas.height;

    let imageData = new ImageData(new Uint8ClampedArray(imageDataOriginal.data), imageDataOriginal.width, imageDataOriginal.height);

    if (grayscaleCheckbox.checked) {
      imageData = convertToGrayscale(imageData);
    }

    const smoothedData = applySmoothingFilter(imageData);
    ctx.putImageData(smoothedData, 0, 0);
  }

  function convertToGrayscale(imageData) {
    const data = imageData.data;
    for (let i = 0; i < data.length; i += 4) {
      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
      data[i] = data[i + 1] = data[i + 2] = avg;
    }
    return imageData;
  }

  function applySmoothingFilter(imageData) {
    const width = imageData.width;
    const height = imageData.height;
    const srcData = imageData.data;
    const destData = new Uint8ClampedArray(srcData);

    const getIndex = (x, y) => (y * width + x) * 4;

    for (let y = 1; y < height - 1; y++) {
      for (let x = 1; x < width - 1; x++) {
        let sumR = 0, sumG = 0, sumB = 0;
        for (let dy = -1; dy <= 1; dy++) {
          for (let dx = -1; dx <= 1; dx++) {
            const idx = getIndex(x + dx, y + dy);
            sumR += srcData[idx];
            sumG += srcData[idx + 1];
            sumB += srcData[idx + 2];
          }
        }
        const centerIdx = getIndex(x, y);
        destData[centerIdx] = sumR / 9;
        destData[centerIdx + 1] = sumG / 9;
        destData[centerIdx + 2] = sumB / 9;
      }
    }

    return new ImageData(destData, width, height);
  }
</script>

</body>
</html>



